Introduction

Good naming conventions and practices are as important (one might argue more important) than good code comments. Naming is perhaps the single most important factor that affects readability of code. This document is intended to address two aspects of naming: appearance and content.
General Guidelines

When you name a class, interface, method or constant, use a name that is, and will remain, meaningful to those programmers who must eventually read your code. Use meaningful words to create names. Avoid using a single character or generic names that do little to define the purpose of the entities they name. Use full words; do not attempt to shorten words by removing vowels. Strive for names that promote self documenting code.

Generally speaking, CamelCase will be used to name classes, and lowerCamelCase will be used to name methods and variables.

Acronyms should be avoided, but if they must be part of an identifier, capitalize only the first letter, loadXml() for example. If the acronym comes at the beginning of the identifier, the acronym should also start with a lowercase letter, xmlLoader for example.
Packages

Package names should consist of only lowercase letters and periods. Abbreviations should only be used if they are commonly known or part of a defined vocabulary, i.e. "ui" for user interface. Plurals should be avoided.

All CTPP packages should begin with "ctpp." then the rest of the package name.

Correct:

    * ctpp.persistence.bean

Incorrect:

    * ctpp.persistenceLayer.bean
    * ctpp.persistence.beans

Classes

Class names begin with an uppercase letter and should not be pluralized unless it groups related items together. Classes represent entities, and thus should always be named using nouns, not verbs. Avoid making a noun out of a verb, example DivideClass. If you are having difficulty naming a class then perhaps it is a design problem and not a naming problem.

Correct:

    * UrlParser

Incorrect:

    * URLParser
    * UrlParse

Interfaces

Like class names, interface names should be set in CamelCase and should not be pluralized unless it is meant to group related items together. Use nouns to name interfaces that act as service declarations, ActionListener for example. Use adjectives to name interfaces that act as descriptions of capabilities. Most interfaces that describe capabilities use an adjective created by tacking on "able" or "ible" suffix onto the end of a verb, Runnable or Accessible for example.

Correct:

    * Calculable
    * PageableItems

Incorrect

    * Execute
    * Transfer

Enums

As of Java 5, enumerations no longer have to be simulated using a class or interface; they are now their own full-fledged type:

public enum Day {SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY}

Therefore, like classes and interfaces, their names should be set in CamelCase. Even though enums contain a collection of items, they should never be pluralized. This is mainly because of how they are used:

Day humpDay = Day.WEDNESDAY;

Enums contain constants, which should be always be capitalized. Because they are implicitly public, no special letter or symbol should be prepended to the constant name.

Correct:

    * enum Size {SMALL, MEDIUM, LARGE}
    * enum Animal {DOG, CAT, BIRD, RABBIT}

Incorrect:

    * enum Roles {admin, user, guest}
    * enum Sweets {candyBar, sodaPop, gobstopper}

Methods

Methods perform actions. Choose method names that clearly and meaningfully describe the actions that will be performed, without including any implementation details. Sometimes a simple verb will suffice. Other times a longer phrase-like method name is needed to adequately communicate details and enhance clarity, getJobSummary() for example. A descriptive method is a self-documenting method. That said, don't overdo it. You should consider renaming method names over 25-30 characters long.

Methods that return a boolean type should usually be phrased as an assertion.

Method names should always be set in lowerCamelCase.
Non-public Instance Methods

Default, protected, and private instance methods should always be prefixed with a single underscore. This contradicts Sun's official coding conventions but in practice actually enhances the readability of the code.

Correct:

    * _terminateProcessing()
    * _getSubTotalCost()
    * _isActive()
    * _hasChildren()

Incorrect:

    * doorBell()
    * _SleepTime()
    * __spiderMonkey()

Public Instance Methods

Public instance methods should begin with a lowercase letter, with no underscore.

Correct:

    * addEventListener()
    * calculateArea()

Incorrect:

    * spinner()
    * $kite()

Non-public Class Methods

Non-public class methods should be prefixed with an "s" character and then an underscore.

Correct:

    * s_getDefaultTitle()
    * s_getNumberOfDaysInMonth()

Incorrect:

    * s_SearchDocuments()
    * getInstanceCount()

Public Class Methods

Like public instance methods, public class methods should have no special prefix, only the method name.

Correct:

    * addJobStatusChangeListener()
    * calculatePiToFiftyDigits()

Incorrect:

    * _questionDisplay()
    * carpet()

Method Parameters

As with method names, parameter names should communicate meaningful information to the reader. Do not use single characters or abbreviations. No special characters should prefix method names. Use lowerCamelCase always.

Correct:

    * pageNumber
    * absolutePath

Incorrect:

    * NumberOfTimes
    * c

Local Variables

The same rules for method parameters apply to local variables. However, exceptions are allowed for variables used strictly for looping through a collection, for(int i=0;i<10;i++) for example. Local variables referring to collections should describe what the collection contains, and should be pluralized.

Correct:

    * productCount
    * isAvailable
    * carParts

Incorrect:

    * list
    * al

Instance Variables

Name instance variables with great care paying special attention to reducing ambiguity. Try and place yourself in the mind of a programmer totally unfamiliar with your class implementation to help you determine if your variable name is clear enough.
Non-public Instance Variables

Default, private, and protected instance variable names should begin with an underscore, and then continue in lowerCamelCase, like non-public instance methods.

Correct:

    * _selectedFiles
    * _currentAnalysisTechnique

Incorrect:

    * _OpenConnection
    * fileDao

Public Instance Variables

It is almost always a bad idea to leave instance variables public, but in such very rare cases, the leading underscore should be omitted.

Correct:

    * ioChannel

Incorrect:

    * Lock

Class Variables

Class variables are variables that are marked static, but not final.
Non-public Class Variables

Default, protected and private class variables should begin like non-public class methods, with an "s_" prefix.

Correct:

    * s_numInstances

Incorrect:

    * logger

Public Class Variables

Public class variables should be as rare as public instance variables, but the naming convention is the same, simply lowerCamelCase

Correct:

    * freePool

Incorrect:

    * PoolManager

Constants

Constants are variables that are marked final. Constants should always be set in uppercase, and individual words should be separated with the underscore character.
Non-public Instance Constants

Default, private, and protected instance constants should begin with a leading underscore, then continue in uppercase.

Correct:

    * _MAX_CONNECTIONS

Incorrect:

    * _minConnections

Public Instance Constants

Public instance constants should use the came conventions as non-public instance constants, but without the leading underscore.

Correct:

    * DAY_OF_WEEK

Incorrect:

    * DAY_of_year

Non-public Class Constants

Default, private, and protected class constants should begin with a leading "s_" character combination.

Correct:

    * s_MAX_TIMEOUT

Incorrect:

    * s_minTimeout

Public Class Constants

Public class constants should be set in all caps with underscores separating words, no leading underscore.

Correct:

    * READ_METHOD

Incorrect:

    * write_method