#summary Documents the standards and conventions for code comments.

Substantial portions of this document are taken directly from the Ptolemy II project documentation (Volume 1: Introduction to Ptolemy II). The source code documentation in the Ptolemy II project is exemplary, and should serve as a baseline from which to judge the quality of our own comments.

== Introduction ==

Good comments are essential to easily readable and maintainable code. Good comments actually extend the life of code because well-commented code is more likely to be reused rather than rewritten. For open source projects, well-documented code communicates to casual observers and potential contributors that the project is committed to producing mature, quality code.

It is critical that documentation be written at the time of development when details are still fresh in your mind, rather than six months later as an afterthought. Likewise, when code is modified and/or extended, the comments and other documentation about the code should be immediately updated to reflect the changes.

Code comments fall into two categories:

    * Javadoc comments, which become part of the auto-generated documentation.
      * Provides an overview of the whole project (overview.html)
      * Explains the purpose of packages (package-info.java)
      * Explains the interface contract of classes (in each class file)
    * Code comments, which are available only by looking at the source code.
      * Explains how the code works

*All Javadoc and code comments should be complete thoughts, capitalized at the beginning and with a period at the end. Spelling and grammar should be correct.*

== Javadoc ==

Javadoc is a program distributed with the Java SDK that generates HTML documentation files from Java source code files. Javadoc comments begin with `/``*``*` and end with `*``/`. The comment immediately preceding a code construct (method, member, or class) documents that code construct. Javadoc documentation should be provided for all projects, packages, classes, interfaces, enums and all public, protected, and private members and methods contained therein.

Please take the time to familiarize yourself with the finer points of Javadoc at this URL: http://java.sun.com/javase/6/docs/technotes/guides/javadoc/index.html.

When writing Javadoc comments, pay special attention to the first sentence of each Javadoc comment. This first sentence is used as a summary in the Javadocs. It is extremely helpful if the first sentence is a cogent and complete summary.

Javadoc comments can include embedded HTML formatting. Please use HTML comments sparingly, and make sure the markup is well-formed. Any code included in comments should be wrapped in code tags: {{{<code>i = 1</code>}}}.

The Javadoc program gives extensive diagnostics when run on a source file. Comments should be formatted until there are no Javadoc warnings.

== Class Documentation ==

The class documentation is the Javadoc comment that immediately precedes the class definition line. It is a particularly important part of the documentation. It should describe what the class does and how it is intended to be used. When writing it, put yourself in the mind of the user of your class. What does that person need to know to clearly understand what the class is for? A clear explanation is especially important when a person doesn't have a clear understanding of the larger system. *Usually, it is of little help to explain implementation details of the class.*

A class may be intended to be a base class that is extended by other programmers. In this case, there may be two distinct sections to the class documentation. The first section should describe how a user of the class should use the class. The second section should describe how a programmer can meaningfully extend the class. Only the second section should reference protected members or methods. The first section has no use for them. Of course, if the class is abstract, it cannot be used directly and the first section can be omitted.

Each class comment should also include the following Javadoc tags:

    * @author
      * The @author tag should name the creator of the class or interface. For example:
        * @author shirk
      * SVN logins should be used for author/s, not the full name. If a class has been authored by multiple developers, their SVN logins should be included as well, on subsequent lines:
        * @author shirk
        * @author amitku
    * @since
      * The @since tag refers the release that the class first appeared in. For example:
        * @since 0.5 beta
      * Note that the @since tag can also be used when a method is added to an existing class, which will help users notice new features in older code.

== Constructor Documentation ==

Constructor documentation usually begins with the phrase "Constructs an instance that ..." and goes on to give the properties of that instance. As with class documentation, it is important to communicate the specifics of the constructor behavior in the first sentence as this is the one that will show up in method summary.

== Method Documentation ==

Method documentation needs to state what the method does and how it should be used. It is almost never useful to simply provide an English translation of the code. This is a good example of the type of method documentation that is expected:

{{{
/**
 * Marks this object invalid, indicating that when a method
 * is next called to get information from the object, that
 * information needs to be reconstructed from the database.
 */
public void invalidate() {
   valid = false;
}
}}}

By contrast, here is a poor method comment:

{{{
/**
 * Sets the variable valid to false.
 */
public void invalidate() {
   valid = false;
}
}}}

While this certainly describes what the method does from the perspective of the coder, it says nothing useful from the perspective of the user of the class, who cannot see the (presumably private) variable valid nor how that variable is used. On closer examination, this comment describes how the method is accomplishing what it does, but it does not describe what it accomplishes.

Here is an even worse method comment:

{{{
/**
 * Invalidates this object.
 */
public void invalidate() {
   valid = false;
}
}}}

This is no more helpful than reading the method name.

Comments for base class methods that are intended to be overridden should include information about what the method generally does, plus information that a programmer may need to override it. If the derived class uses the base class method (by calling `super.methodName()`), but then appends to its behavior, then the documentation in the derived class should describe both what the base class does and what the derived class does.