<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
        http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">


	<var name="taskFlowModel" class="org.imirsel.nema.webapp.model.TaskFlowModel" />
	<var name="flow" class="org.imirsel.nema.model.Flow" />
	<var name="componentList" class="java.util.ArrayList" />


	<view-state id="selectTask" model="taskFlowModel">
		<on-entry>
			<evaluate expression="flowService.getFlowTemplates()"
				result="flowScope.flowSet"></evaluate>
		</on-entry>
		<transition on="show" to="displayFlowComponents">
			<evaluate expression="flowService.getFlow(taskFlowModel.id)"
				result="flow" />
			<evaluate expression="flowService.getComponents(flow.getUri())"
				result="componentList" />
			<evaluate expression="tasksService.fillDefaultParameter(flow)"
				result="flowScope.parameterMap" />
		</transition>
	</view-state>

	<view-state id="displayFlowComponents" model="taskFlowModel">
		<on-render>
			<set name="taskFlowModel.name" value="flow.name" />
			<set name="taskFlowModel.description" value="flow.description" />
		</on-render>
		<transition on="edit" to="editComponentProperties" />
		<transition on="test" to="test" />
		<transition on="cancel" to="selectTask" />
		<transition on="clear" to="displayFlowComponents" />
	</view-state>

	<view-state id="test">
		<transition on="test" to="runTest" />
		<transition on="run" to="run" />
		<transition on="cancel" to="selectTask" />
		<transition on="edit" to="displayFlowComponents" />
	</view-state>

	<view-state id="testResult">
		<on-entry>
			<evaluate expression="tasksService.getJobResult(job)"
				result="flowScope.resultSet" />
		</on-entry>
		<transition on="run" to="run" />
		<transition on="cancel" to="selectTask" />
		<transition on="edit" to="displayFlowComponents" />
	</view-state>

	<view-state id="editNormalComponentProperties">

		<transition on="save" to="displayFlowComponents">

			<evaluate expression="tasksService.saveParameter(flowRequestContext)"
				result="flowScope.parameterMap" />
		</transition>
		<transition on="cancel" to="displayFlowComponents" />
	</view-state>

	<view-state id="editRemoteServiceComponentProperties">

		<transition on="next" to="generateExecutable">

			<evaluate expression="tasksService.saveParameter(flowRequestContext)"
				result="flowScope.parameterMap" />
		</transition>
		<transition on="cancel" to="displayFlowComponents" />
	</view-state>
	
	<subflow-state id="executable" subflow="task/executable">
	  <transition on="success" to="displayFlowComponent">
	  <evaluate expression="tasksService.addExecutable(component,parameterMap,executableUrl)"/></transition>
	</subflow-state>
	<action-state id="editComponentProperties">
		<evaluate expression="tasksService.getRoles()" result="conversationScope.userRoles" />
		<evaluate expression="componentList.get(requestParameters.idx)"
			result="conversationScope.component" />
		<evaluate
			expression="flowService.getComponentPropertyDataType(conversationScope.component, flow.getUri())"
			result="conversationScope.datatypeMap">
		</evaluate>
		<evaluate expression='datatypeMap.ketSet.contains("_remoteComponent")'>
			<attribute name="name" value="isRemoteService" />
		</evaluate>
		<transition on="isRemoteService.yes" to="editRemoteServiceComponentProperties"/>
		<transition on="isRemoteService.no" to="editNormalComponentProperties"/>
	</action-state>
	
	<action-state id="runTest">
		<evaluate
			expression="tasksService.testRun(flow,parameterMap,taskFlowModel.name,taskFlowModel.description)"
			result="flowScope.job" />
		<transition on="success" to="testResult" />
	</action-state>

	<action-state id="run">
		<evaluate
			expression="tasksService.testRun(flow,parameterMap,taskFlowModel.name,taskFlowModel.description)"
			result="flowScope.job" />
		<transition on="success" to="checkRunResult" />
	</action-state>

	<decision-state id="checkRunResult">
		<if test="jobId==null" then="run" else="jobdetail" />
	</decision-state>

	<end-state id="jobdetail"
		view="externalRedirect:contextRelative:get/JobManager.jobDetail?id=${job.id}" />
</flow>