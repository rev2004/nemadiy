<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
        http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">


	<var name="taskFlowModel" class="org.imirsel.nema.webapp.model.TaskFlowModel" />
	<var name="flow" class="org.imirsel.nema.model.Flow" />
	<var name="componentList" class="java.util.ArrayList" />




	<view-state id="selectTask" model="taskFlowModel">
		<on-entry>
			<evaluate expression="flowService.getFlowTemplates()" result="flowScope.flowSet"></evaluate>
		</on-entry>
		<transition on="show" to="displayFlowComponents">
			<evaluate expression="flowService.getFlow(taskFlowModel.id)" result="flow" />
			<evaluate expression="flowService.getComponents(flow.getUri())" result="flowScope.componentList" />
			<evaluate expression="tasksService.fillDefaultParameter(flow)" result="flowScope.parameterMap" />
			<evaluate expression="tasksService.setDatatypeMaps(flow)" result="flowScope.datatypeMaps"></evaluate>
		</transition>
	</view-state>

	<view-state id="displayFlowComponents" model="taskFlowModel">
		<on-render>
			<set name="taskFlowModel.name" value="flow.name" />
			<set name="taskFlowModel.description" value="flow.description" />
		</on-render>
		<transition on="edit" to="editComponentProperties" />
		<transition on="test" to="test" />
		<transition on="cancel" to="selectTask" />
		<transition on="clear" to="displayFlowComponents" />
	</view-state>

	<view-state id="test">
		<transition on="test" to="runTest" />
		<transition on="run" to="run" />
		<transition on="cancel" to="selectTask" />
		<transition on="edit" to="displayFlowComponents" />
	</view-state>

	<view-state id="testResult">
		<on-entry>
			<evaluate expression="tasksService.getJobResult(job)" result="flowScope.resultSet" />
		</on-entry>
		<transition on="run" to="run" />
		<transition on="cancel" to="selectTask" />
		<transition on="edit" to="displayFlowComponents" />
	</view-state>

	<view-state id="editSimpleComponentProperties">
		<transition on="save" to="displayFlowComponents">
			<!-- <evaluate expression="tasksService.saveParameter(flowRequestContext)" result="flowScope.parameterMap" />-->
			<evaluate expression="tasksService.updateDataMap(requestParameters,datatypeMap)" />
		</transition>
		<transition on="cancel" to="displayFlowComponents" />
	</view-state>

	<view-state id="editRemoteServiceComponentProperties">
		<on-entry>
			<evaluate expression="tasksService.shownMap(datatypeMap)" result="viewScope.shownMap" />
		</on-entry>
		
		<transition on="next" to="generateExecutable">
		    
			<!-- <evaluate expression="tasksService.saveParameter(flowRequestContext)" result="flowScope.parameterMap" />-->
			<evaluate expression="tasksService.updateDataMap(requestParameters,datatypeMap)" />
		</transition>
		<transition on="cancel" to="displayFlowComponents" />
	</view-state>

	<subflow-state id="generateExecutable" subflow="task/executable">
		<input name="executableBundle" value="tasksService.findBundle(taskFlowModel.executableMap[component],datatypeMap)" />
		<output name="executableBundle" type="org.imirsel.nema.model.ExecutableBundle" />
		<output name="executableOs" type="org.imirsel.nema.model.OsDataType" />
		<output name="executableGroup" type="java.lang.String" />
		<transition on="success" to="displayFlowComponents">
			<!--
				<evaluate
				expression="tasksService.addExecutable(component,parameterMap,executableOs,executableGroup,executableBundle,taskFlowModel.uuid,taskFlowModel.executableMap)"
				/>
			-->
			<evaluate
				expression="tasksService.addExecutable(component,datatypeMap,executableOs,executableGroup,executableBundle,taskFlowModel.uuid,taskFlowModel.executableMap)" />

		</transition>
		<transition on="cancel" to="editRemoteServiceComponentProperties" />
	</subflow-state>

	<action-state id="editComponentProperties">
		<evaluate expression="tasksService.getRoles()" result="conversationScope.userRoles" />
		<evaluate expression="componentList.get(requestParameters.idx)" result="conversationScope.component" />
		<set name="flowScope.datatypeMap" value="datatypeMaps[component]" />
		<evaluate expression='tasksService.isRemoteServiceComponent(datatypeMap)'>
			<attribute name="name" value="isRemoteService" />
		</evaluate>
		<transition on="isRemoteService.yes" to="editRemoteServiceComponentProperties" />
		<transition on="isRemoteService.no" to="editSimpleComponentProperties" />
	</action-state>

	<action-state id="runTest">
		<evaluate expression="tasksService.testRun(flow,parameterMap,taskFlowModel.name,taskFlowModel.description)"
			result="flowScope.job" />
		<transition on="success" to="testResult" />
	</action-state>

	<action-state id="run">
		<evaluate expression="tasksService.testRun(flow,parameterMap,taskFlowModel.name,taskFlowModel.description)"
			result="flowScope.job" />
		<transition on="success" to="checkRunResult" />
	</action-state>

	<decision-state id="checkRunResult">
		<if test="jobId==null" then="run" else="jobdetail" />
	</decision-state>

	<end-state id="jobdetail" view="externalRedirect:contextRelative:get/JobManager.jobDetail?id=${job.id}" />
</flow>