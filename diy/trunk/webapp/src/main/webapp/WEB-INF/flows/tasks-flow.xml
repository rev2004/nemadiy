<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
        http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

	
	<var name="flow" class="org.imirsel.nema.model.Flow" />
	<var name="componentList" class="java.util.ArrayList" />
	<view-state id="taskSelection" model="flow">

		<on-render>
			<evaluate expression="flowService.getFlowTemplates()"
				result="viewScope.flowSet"></evaluate>
		</on-render>
		<transition on="show" to="parameterForm" />
	</view-state>
	<view-state id="parameterForm" model="flow">
		<on-render>

			<evaluate expression="flowService.getFlow(flow.id)" result="flow" />
			<evaluate expression="flowService.getComponents(flow.getUri())"
				result="componentList" />
				
			<evaluate expression="tasksService.fillDefaultParameters(flow)" result="flowScope.paramterMap"/>
			<!-- evaluate expression="java.util.Collections.sort(componentList)"/-->
		</on-render>
		<transition on="edit" to="editor" />
		<transition on="test" to="test"/>
		<transition on="cancel" to="taskSelection" />
		<transition on="clear" to="parameterForm" />
	</view-state>
	<view-state id="test">
		<transition on="test" to="runTest" />
		<transition on="run" to="run" />
		<transition on="cancel" to="parameterForm" />
	</view-state>
	<view-state id="editor">
		<on-render>
			<evaluate expression="tasksService.getRoles()" result="viewScope.userRoles" />
			<evaluate expression="componentList.get(requestParameters.idx)"
				result="viewScope.component" />
			<evaluate expression="tasksService.test(requestParameters.idx)" />
			<evaluate
				expression="flowService.getComponentPropertyDataType(viewScope.component, flow.getUri())"
				result="viewScope.datatypeMap" />
		</on-render>
		<transition on="save" to="parameterForm" />
		<transition on="cancel" to="parameterForm" />
	</view-state>
	<action-state id="runTest">
		<evaluate expression="taskService.testRun(flow)" />
		<transition on="yes" to="test" />
		<transition on="no" to="test" />
	</action-state>
	<action-state id="run">
		<evaluate expression="taskService.run(flow)" />
		<transition on="yes" to="joblist" />
		<transition on="no" to="fail" />
	</action-state>

	<end-state id="joblist"
		view="externalRedirect:contextRelative:get/JobManager.getUserJobs" />
</flow>